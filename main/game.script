function init(self)
	self.screen_position = vmath.vector3(0, 0, 0)
	self.next_screen = nil
	self.current_screen = nil
	self.loading = false
	self.direction = nil

	-- msg.post("@render:", "use_fixed_projection", { zoom = 4 })
	msg.post("#", "load_screen", { direction = hash("center") })
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function did_finish_screen_swap(self)
	self.loading = false

	if self.current_screen then
		go.delete(self.current_screen)
	end

	self.current_screen = self.next_screen
	msg.post("/hero", "enter_screen", { direction = self.direction })
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_screen") and not self.loading then
		self.loading = true
		self.direction = message.direction

		if message.direction == hash("up") then
			self.screen_position.y = self.screen_position.y + 1
		elseif message.direction == hash("down") then
			self.screen_position.y = self.screen_position.y - 1
		elseif message.direction == hash("right") then
			self.screen_position.x = self.screen_position.x + 1
		elseif message.direction == hash("left") then
			self.screen_position.x = self.screen_position.x - 1
		end

		local positions = {
			[hash("center")] = vmath.vector3(),
			[hash("up")] = vmath.vector3(0, 192, 0),
			[hash("down")] = vmath.vector3(0, -192, 0),
			[hash("right")] = vmath.vector3(320, 0, 0),
			[hash("left")] = vmath.vector3(-320, 0, 0)
		}

		local f = "#factory-" .. self.screen_position.x .. "-" .. self.screen_position.y
		local p = positions[message.direction]

		print("f = " .. f)
		print("p = " .. p)
		print("self.screen_position = " .. self.screen_position)
		print("self.direction = " .. self.direction)

		self.next_screen = collectionfactory.create(f, p)

		if self.current_screen then
			local current_root = self.current_screen[hash("/root")]
			local next_root = self.next_screen[hash("/root")]
			local scroll_speed = 0.5

			go.animate(current_root, "position", go.PLAYBACK_ONCE_FORWARD, -p, go.EASING_LINEAR, scroll_speed, 0)
			go.animate(next_root, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(), go.EASING_LINEAR, scroll_speed, 0)

			local hero_position = go.get_position("/hero")
			go.animate("/hero", "position", go.PLAYBACK_ONCE_FORWARD, hero_position - p, go.EASING_LINEAR, scroll_speed, 0, did_finish_screen_swap)
		else
			did_finish_screen_swap(self)
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
